declare class GlideDateTime {
    constructor(value?: string|GlideDateTime);

    add(gd: GlideTime|number): void;
    addDaysLocalTime(amount: number): void;
    addDaysUTC(amount: number): void;
    addMonthsLocalTime(amount: number): void;
    addMonthsUTC(amount: number): void;
    addSeconds(value: number): void;
    addWeeksLocalTime(amount: number): void;
    addWeeksUTC(amount: number): void;
    addYearsLocalTime(amount: number): void;
    addYearsUTC(amount: number): void;
    compareTo(o: object): number;
    equals(o: object): boolean;
    getDate(): GlideTime;
    getDayOfMonthLocalTime(): number;
    getDayOfMonthUTC(): number;
    getDayOfWeekLocalTime(): number;
    getDayOfWeekUTC(): number;
    getDaysInMonthUTC(): number;
    getDisplayValue(): string;
    getDisplayValueInternal(): string;
    getDSTOffset(): number;
    getErrorMsg(): string;
    getLocalDate(): GlideTime;
    getLocalTime(): GlideTime;
    getMonthLocalTime(): number;
    getMonthUTC(): number;
    getNumericValue(): number;
    getTime(): GlideTime;
    getTZOffset(): number;
    getValue(): string;
    getWeekOfYearLocalTime(): number;
    getWeekOfYearUTC(): number;
    getYearLocalTime(): number;
    getYearUTC(): number;
    hasDate(): boolean;
    isDST(): boolean;
    isValid(): boolean;
    setDayOfMonthLocalTime(day: number): void;
    setDayOfMonthUTC(day: number): void;
    setDisplayValue(value: string, format?: string): void;
    setDisplayValueInternal(value: string): void;
    setGlideDateTime(g: GlideDateTime): void;
    setMonthLocalTime(month: number): void;
    setMonthUTC(month: number): void;
    setNumericValue(milliseconds: number): void;
    setValue(o: string|number|GlideDateTime): void;
    setValueUTC(dt: string, format: string): void;
    setYearLocalTime(year: number): void;
    setYearUTC(year: number): void;
    subtract(start: GlideDateTime, end?: GlideDateTime): GlideDuration;
    subtract(time: GlideTime|number): void;
    toString(): string;
}
